{
  "mcpServers": {
    "claude-code": {
      "args": [
        "-y",
        "@steipete/claude-code-mcp@latest"
      ],
      "autoApprove": [
        "claude_code"
      ],
      "command": "npx",
      "custom_instructions": {
        "text": "# üß† Claude Code MCP Server ‚Äî Prompt Engineering Guide\n\nThis document defines the **operational behavior** and **prompting standards** for interacting with the Claude Code MCP Server and its tools, including:\n\n- üß† SuperClaude  \n- ‚öôÔ∏è MCP Servers: `Context7`, `Playwright`, `Sequential-Thinking`, `Serena`\n\nYou, the LLM, are an **intelligent intermediary**. Your role is to accurately **translate user intent** into structured Claude Code prompts that execute the task successfully.\n\n---\n\n## ‚úÖ Key Operational Directives\n\n### üéØ 1. Translate User Intent into Commands\nFocus on **what the user wants**, not how to achieve it. Example:\n\n> ‚ÄúFix this buggy function‚Äù ‚Üí `/sc:improve [path]`\n\nLet Claude Code handle execution logic.\n\n---\n\n### ‚öôÔ∏è 2. Trust SuperClaude's Auto-Activation\nAvoid micromanagement unless explicitly needed. Personas, flags, and toolchains will **auto-activate** based on the language and context of your prompt.\n\n---\n\n### ü™ú 3. Start Simple, Escalate When Necessary\nUse the **simplest possible command**. If output isn't sufficient, layer additional flags or modules like `--think`, `--focus`, or `--seq`.\n\n---\n\n### üß† 4. Trigger Personas Implicitly\nUse **intent-driven phrasing** (e.g. ‚Äúoptimize,‚Äù ‚Äúdebug‚Äù) to activate the right Claude persona. Manual persona selection is rarely needed.\n\n---\n\n## üß© Command Categories\n\n### üî® Development & Implementation\n\n| Command | Description |\n|--------|-------------|\n| `/sc:workflow [prd]` | Convert product spec into a step-by-step plan. |\n| `/sc:implement [feature]` | Generate new feature code (use `--type`, `--framework` for context). |\n| `/sc:build` | Compile or package existing code. |\n| `/sc:design [description]` | Plan system-level architecture or database schemas. |\n\n---\n\n### üß™ Analysis & Troubleshooting\n\n| Command | Description |\n|--------|-------------|\n| `/sc:analyze [path]` | Review and evaluate code. Use `--focus` for targeted analysis. |\n| `/sc:troubleshoot \"[error]\"` | Diagnose bugs. Add `--logs` if logs are provided. |\n| `/sc:explain [code]` | Educational explanation of code or concepts. |\n\n---\n\n### üîß Refactoring & Quality\n\n| Command | Description |\n|--------|-------------|\n| `/sc:improve [path]` | Refactor and enhance code (safe by default, preview with `--preview`). |\n| `/sc:cleanup [path]` | Remove unused code, clean imports, tidy structure. |\n| `/sc:test` | Run existing tests. Use `/sc:implement --with-tests` to generate tests. |\n\n---\n\n### üìö Docs & Version Control\n\n| Command | Description |\n|--------|-------------|\n| `/sc:document [path_or_feature]` | Generate documentation and inline comments. |\n| `/sc:estimate \"[feature]\"` | Get time and complexity estimates. |\n| `/sc:git commit` | Auto-generate commit messages with `--smart-commit`. |\n\n---\n\n## üè∑Ô∏è Flag Reference\n\n### üß† Analysis Depth\n\n| Flag | Purpose |\n|------|---------|\n| `--think` | Multi-file reasoning |\n| `--think-hard` | Deep architectural reasoning |\n| `--ultrathink` | System-wide issue analysis |\n\n---\n\n### üõ°Ô∏è Safety & Performance\n\n| Flag | Purpose |\n|------|---------|\n| `--safe-mode` | Minimize risk in sensitive environments |\n| `--preview` | Show changes before applying |\n| `--validate` | Pre-run risk assessment |\n| `--uc` / `--ultracompressed` | Token compression for large projects |\n\n---\n\n### üîç Focus & Scope\n\n| Flag | Purpose |\n|------|---------|\n| `--focus [type]` | e.g. security, performance, quality |\n| `--scope [level]` | e.g. file, module, project |\n\n---\n\n### üß† MCP Server Activation\n\n| Flag | Used When... |\n|------|--------------|\n| `--c7` / `--context7` | User requests best-practice documentation |\n| `--seq` / `--sequential` | Deep, multi-step reasoning or debugging |\n| `--play` / `--playwright` | UI automation, browser testing |\n| `--magic` | Modern UI or visual generation |\n\n---\n\n## üß¨ Persona Activation via Keywords\n\nClaude will auto-detect the right persona based on language. Use clear keywords:\n\n| Persona | Triggers |\n|---------|----------|\n| `architect` | architecture, scalability |\n| `frontend` | UI, React, accessibility |\n| `backend` | API, database, service |\n| `security` | vulnerability, auth, OWASP |\n| `performance` | slow, optimize, bottleneck |\n| `analyzer` | debug, troubleshoot, root cause |\n| `qa` | test, coverage, edge case |\n| `refactorer` | refactor, clean, tech debt |\n| `devops` | deploy, docker, CI/CD |\n| `mentor` | explain, understand |\n| `scribe` | document, README, comments |\n\n---\n\n## üß≠ Execution Mindset\n\n- ‚ú≥Ô∏è **Focus on intent** over procedure.\n- üß± **Keep prompts minimal** unless deeper control is explicitly required.\n- üí° **Trust the system‚Äôs automation** unless otherwise directed.\n- üîÅ Iterate only if initial command doesn't meet expectations.\n\n---\n\nBy following this guide, you'll efficiently instruct Claude Code to execute user requests with clarity, intelligence, and minimal friction."
      },
      "disabled": false,
      "env": {
        "CLAUDE_CLI_NAME": "claude-code"
      }
    },
    "context7": {
      "autoApprove": [
        "resolve-library-id",
        "get-library-docs"
      ],
      "custom_instructions": {
        "disabled": false,
        "text": "Whenever a prompt involves programming, libraries, APIs, or tools:\n\n    Engage the Context7 MCP\n    Before writing any code or explanation, activate Context7 to fetch official documentation.\n\n    Resolve the Library or Tool\n    Identify which library, framework, or package the user is referring to.\n\n    Fetch Documentation\n    Retrieve the latest and most accurate technical docs for that library or tool.\n\n    Use Docs as Source of Truth\n    Read the docs carefully. Use them for method signatures, usage patterns, configuration, and examples.\n\n    Avoid Guesswork\n    Never rely on internal memory or assumptions when working with APIs or external tools.\n\n    Answer with Accuracy\n    Base your response fully on what was retrieved. If needed, quote or paraphrase for clarity."
      },
      "disabled": false,
      "url": "https://mcp.context7.com/mcp"
    },
    "git": {
      "args": [
        "mcp-server-git"
      ],
      "autoApprove": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show",
        "git_init",
        "git_branch"
      ],
      "command": "uvx",
      "disabled": true
    },
    "github": {
      "custom_instructions": {
        "text": "Use `git remote -v` to get the owner and repo name."
      },
      "disabled": false,
      "disabled_tools": [
        "cancel_workflow_run",
        "create_and_submit_pull_request_review",
        "create_branch",
        "create_or_update_file",
        "create_pending_pull_request_review",
        "create_pull_request",
        "create_repository",
        "delete_file",
        "delete_pending_pull_request_review",
        "delete_workflow_run_logs",
        "dismiss_notification",
        "download_workflow_run_artifact",
        "fork_repository",
        "get_code_scanning_alert",
        "get_dependabot_alert",
        "get_discussion",
        "get_discussion_comments",
        "get_file_contents",
        "get_job_logs",
        "get_me",
        "get_secret_scanning_alert",
        "get_tag",
        "get_workflow_run",
        "get_workflow_run_logs",
        "get_workflow_run_usage",
        "list_branches",
        "list_code_scanning_alerts",
        "list_dependabot_alerts",
        "list_discussion_categories",
        "list_discussions",
        "list_notifications",
        "list_secret_scanning_alerts",
        "list_tags",
        "list_workflow_jobs",
        "list_workflow_run_artifacts",
        "list_workflow_runs",
        "list_workflows",
        "manage_notification_subscription",
        "manage_repository_notification_subscription",
        "mark_all_notifications_read",
        "push_files",
        "rerun_failed_jobs",
        "rerun_workflow_run",
        "run_workflow",
        "search_code",
        "search_issues",
        "search_orgs",
        "search_pull_requests",
        "search_repositories",
        "search_users",
        "submit_pending_pull_request_review",
        "get_notification_details"
      ],
      "headers": {
        "Authorization": "Bearer ${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "url": "https://api.githubcopilot.com/mcp/"
    },
    "grep": {
      "autoApprove": [
        "searchGitHub"
      ],
      "disabled": true,
      "url": "https://mcp.grep.app"
    },
    "sequentialthinking": {
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "autoApprove": [
        "sequentialthinking"
      ],
      "command": "npx",
      "disabled": false
    },
    "shadcn-theme": {
      "args": [
        "-y",
        "shadcn@latest",
        "registry:mcp"
      ],
      "autoApprove": [
        "init",
        "get_items",
        "get_item",
        "add_item"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "REGISTRY_URL": "https://tweakcn.com/r/themes/registry.json"
      }
    },
    "shadcn-ui": {
      "args": [
        "@jpisnice/shadcn-ui-mcp-server"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": ""
      }
    },
    "taskmanager": {
      "args": [
        "-y",
        "@kazuph/mcp-taskmanager@latest"
      ],
      "autoApprove": [
        "request_planning",
        "get_next_task",
        "mark_task_done",
        "approve_task_completion",
        "approve_request_completion",
        "open_task_details",
        "list_requests",
        "add_tasks_to_request",
        "update_task",
        "delete_task"
      ],
      "command": "npx",
      "custom_instructions": {
        "text": "For every user prompt:\n\n    Decompose into Tasks\n    Always begin by breaking the prompt into small, actionable tasks. Think in terms of steps required to fully satisfy the request.\n\n    Use the TaskManager MCP\n    Treat each step as a task. Queue and manage these tasks using the TaskManager. Never skip task creation or execution.\n\n    Consult Memory First\n    Before planning or executing tasks, use the Memory MCP to recall relevant goals, preferences, past tasks, or patterns. Let memory guide how tasks are understood and executed.\n\n    Step-by-Step Execution\n    Process one task at a time. Always retrieve the next task, execute it carefully, and mark it done before moving to the next.\n\n    Use Context7 for Code Tasks\n    If any task involves programming, libraries, tools, or APIs‚Äîuse Context7 MCP to fetch up-to-date documentation before writing code or providing an explanation. Use this documentation as your source of truth.\n\n    Think Logically\n    For tasks that involve reasoning, planning, or step-by-step problem solving, invoke the SequentialThinking MCP and follow its structured thinking process.\n\n    Store New Knowledge\n    As you work through tasks, capture important discoveries, habits, goals, and patterns using the Memory MCP.\n\n    Full Completion\n    Do not consider the request complete until all tasks are processed, memory is updated, and the entire flow has been reviewed."
      },
      "disabled": true
    },
    "taskmaster-ai": {
      "args": [
        "-y",
        "--package=task-master-ai",
        "task-master-ai"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "OPENAI_API_KEY": ""
      }
    }
  },
  "nativeMCPServers": {
    "mcphub": {
      "autoApprove": [
        "get_current_servers",
        "toggle_mcp_server"
      ],
      "disabled": false,
      "disabled_prompts": [
        "create_native_server"
      ],
      "disabled_resources": [],
      "disabled_tools": []
    },
    "neovim": {
      "autoApprove": [
        "execute_lua",
        "execute_command",
        "read_file",
        "move_item",
        "read_multiple_files",
        "delete_items",
        "find_files",
        "list_directory",
        "write_file",
        "edit_file"
      ],
      "disabled": false,
      "disabled_prompts": [
        "parrot"
      ],
      "disabled_tools": [
        "replace_in_file"
      ]
    }
  }
}
