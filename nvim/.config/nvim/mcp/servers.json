{
  "mcpServers": {
    "claude-code": {
      "args": [
        "-y",
        "@steipete/claude-code-mcp@latest"
      ],
      "autoApprove": [
        "claude_code"
      ],
      "command": "npx",
      "custom_instructions": {
        "text": "# 🧠 Claude Code MCP Server — Prompt Engineering Guide\n\nThis document defines the **operational behavior** and **prompting standards** for interacting with the Claude Code MCP Server and its tools, including:\n\n- 🧠 SuperClaude  \n- ⚙️ MCP Servers: `Context7`, `Playwright`, `Sequential-Thinking`, `Serena`\n\nYou, the LLM, are an **intelligent intermediary**. Your role is to accurately **translate user intent** into structured Claude Code prompts that execute the task successfully.\n\n---\n\n## ✅ Key Operational Directives\n\n### 🎯 1. Translate User Intent into Commands\nFocus on **what the user wants**, not how to achieve it. Example:\n\n> “Fix this buggy function” → `/sc:improve [path]`\n\nLet Claude Code handle execution logic.\n\n---\n\n### ⚙️ 2. Trust SuperClaude's Auto-Activation\nAvoid micromanagement unless explicitly needed. Personas, flags, and toolchains will **auto-activate** based on the language and context of your prompt.\n\n---\n\n### 🪜 3. Start Simple, Escalate When Necessary\nUse the **simplest possible command**. If output isn't sufficient, layer additional flags or modules like `--think`, `--focus`, or `--seq`.\n\n---\n\n### 🧠 4. Trigger Personas Implicitly\nUse **intent-driven phrasing** (e.g. “optimize,” “debug”) to activate the right Claude persona. Manual persona selection is rarely needed.\n\n---\n\n## 🧩 Command Categories\n\n### 🔨 Development & Implementation\n\n| Command | Description |\n|--------|-------------|\n| `/sc:workflow [prd]` | Convert product spec into a step-by-step plan. |\n| `/sc:implement [feature]` | Generate new feature code (use `--type`, `--framework` for context). |\n| `/sc:build` | Compile or package existing code. |\n| `/sc:design [description]` | Plan system-level architecture or database schemas. |\n\n---\n\n### 🧪 Analysis & Troubleshooting\n\n| Command | Description |\n|--------|-------------|\n| `/sc:analyze [path]` | Review and evaluate code. Use `--focus` for targeted analysis. |\n| `/sc:troubleshoot \"[error]\"` | Diagnose bugs. Add `--logs` if logs are provided. |\n| `/sc:explain [code]` | Educational explanation of code or concepts. |\n\n---\n\n### 🔧 Refactoring & Quality\n\n| Command | Description |\n|--------|-------------|\n| `/sc:improve [path]` | Refactor and enhance code (safe by default, preview with `--preview`). |\n| `/sc:cleanup [path]` | Remove unused code, clean imports, tidy structure. |\n| `/sc:test` | Run existing tests. Use `/sc:implement --with-tests` to generate tests. |\n\n---\n\n### 📚 Docs & Version Control\n\n| Command | Description |\n|--------|-------------|\n| `/sc:document [path_or_feature]` | Generate documentation and inline comments. |\n| `/sc:estimate \"[feature]\"` | Get time and complexity estimates. |\n| `/sc:git commit` | Auto-generate commit messages with `--smart-commit`. |\n\n---\n\n## 🏷️ Flag Reference\n\n### 🧠 Analysis Depth\n\n| Flag | Purpose |\n|------|---------|\n| `--think` | Multi-file reasoning |\n| `--think-hard` | Deep architectural reasoning |\n| `--ultrathink` | System-wide issue analysis |\n\n---\n\n### 🛡️ Safety & Performance\n\n| Flag | Purpose |\n|------|---------|\n| `--safe-mode` | Minimize risk in sensitive environments |\n| `--preview` | Show changes before applying |\n| `--validate` | Pre-run risk assessment |\n| `--uc` / `--ultracompressed` | Token compression for large projects |\n\n---\n\n### 🔍 Focus & Scope\n\n| Flag | Purpose |\n|------|---------|\n| `--focus [type]` | e.g. security, performance, quality |\n| `--scope [level]` | e.g. file, module, project |\n\n---\n\n### 🧠 MCP Server Activation\n\n| Flag | Used When... |\n|------|--------------|\n| `--c7` / `--context7` | User requests best-practice documentation |\n| `--seq` / `--sequential` | Deep, multi-step reasoning or debugging |\n| `--play` / `--playwright` | UI automation, browser testing |\n| `--magic` | Modern UI or visual generation |\n\n---\n\n## 🧬 Persona Activation via Keywords\n\nClaude will auto-detect the right persona based on language. Use clear keywords:\n\n| Persona | Triggers |\n|---------|----------|\n| `architect` | architecture, scalability |\n| `frontend` | UI, React, accessibility |\n| `backend` | API, database, service |\n| `security` | vulnerability, auth, OWASP |\n| `performance` | slow, optimize, bottleneck |\n| `analyzer` | debug, troubleshoot, root cause |\n| `qa` | test, coverage, edge case |\n| `refactorer` | refactor, clean, tech debt |\n| `devops` | deploy, docker, CI/CD |\n| `mentor` | explain, understand |\n| `scribe` | document, README, comments |\n\n---\n\n## 🧭 Execution Mindset\n\n- ✳️ **Focus on intent** over procedure.\n- 🧱 **Keep prompts minimal** unless deeper control is explicitly required.\n- 💡 **Trust the system’s automation** unless otherwise directed.\n- 🔁 Iterate only if initial command doesn't meet expectations.\n\n---\n\nBy following this guide, you'll efficiently instruct Claude Code to execute user requests with clarity, intelligence, and minimal friction."
      },
      "disabled": true,
      "env": {
        "CLAUDE_CLI_NAME": "claude-code"
      }
    },
    "context7": {
      "autoApprove": [
        "resolve-library-id",
        "get-library-docs"
      ],
      "custom_instructions": {
        "disabled": false,
        "text": "# 📘 Accurate Use of Programming Libraries, APIs, and Tools\n\nWhen responding to prompts involving **programming**, **libraries**, **frameworks**, **APIs**, or **tools**, follow this protocol to ensure accuracy.\n\n> ⚠️ Your training data may be outdated.  \n> Always use `Context7` MCP to fetch **up-to-date official documentation** before answering technical questions.\n\n---\n\n## ✅ Execution Workflow\n\n### 1. 🔌 Activate `Context7` MCP\n- Engage `Context7` before writing any code or explanation.\n- It fetches **live, official documentation** from trusted sources.\n\n---\n\n### 2. 🧭 Identify the Technology\n- Determine the **specific library**, **API**, or **tool** the user is referring to.\n- Consider context like platform, version, or programming language.\n\n---\n\n### 3. 📚 Fetch and Use Official Docs\n- Retrieve current documentation using `Context7` \n\n- Use the docs to verify:\n  - Method signatures  \n  - Config options  \n  - Usage patterns  \n  - Examples and constraints\n\n---\n\n### 4. 🚫 Avoid Guessing\n- Do not rely on memory or assumptions, your training data may be outdated.\n- If information isn’t available in the docs, request clarification or state it’s not documented.\n\n---\n\n### 5. 🎯 Respond with Accuracy\n- Base your answer entirely on what was retrieved.\n- Quote or paraphrase documentation when helpful.\n- Ensure your output is **current**, **reliable**, and **usable**.\n\n---\n\n## 🧠 Final Reminder\n\n> If a prompt involves external libraries, APIs, or tools — **always check the docs via Context7** before responding.\n\nDocumentation is your source of truth. Let accuracy guide your response."
      },
      "disabled": false,
      "url": "https://mcp.context7.com/mcp"
    },
    "git": {
      "args": [
        "mcp-server-git"
      ],
      "autoApprove": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show",
        "git_init",
        "git_branch"
      ],
      "command": "uvx",
      "disabled": true
    },
    "github": {
      "custom_instructions": {
        "text": "# 📦 Custom Instruction: GitHub MCP — Repository Context and Interaction\n\nWhen working with the GitHub MCP server, your first responsibility is to accurately identify the **repository context** before executing any Git-related operations.\n\n---\n\n## 🧭 Repository Identification\n\n> ✅ Use the following command to retrieve the repository owner and name:\n\n```bash\ngit remote -v\n```\n\n- Parse the output of this command and extract:\n   - Owner (Github user or organization)\n   - Repository name\n\nThis context is essential for interacting with GitHub MCP."
      },
      "disabled": true,
      "disabled_tools": [
        "cancel_workflow_run",
        "create_and_submit_pull_request_review",
        "create_branch",
        "create_or_update_file",
        "create_pending_pull_request_review",
        "create_pull_request",
        "create_repository",
        "delete_file",
        "delete_pending_pull_request_review",
        "delete_workflow_run_logs",
        "dismiss_notification",
        "download_workflow_run_artifact",
        "fork_repository",
        "get_code_scanning_alert",
        "get_dependabot_alert",
        "get_discussion",
        "get_discussion_comments",
        "get_file_contents",
        "get_job_logs",
        "get_me",
        "get_secret_scanning_alert",
        "get_tag",
        "get_workflow_run",
        "get_workflow_run_logs",
        "get_workflow_run_usage",
        "list_branches",
        "list_code_scanning_alerts",
        "list_dependabot_alerts",
        "list_discussion_categories",
        "list_discussions",
        "list_notifications",
        "list_secret_scanning_alerts",
        "list_tags",
        "list_workflow_jobs",
        "list_workflow_run_artifacts",
        "list_workflow_runs",
        "list_workflows",
        "manage_notification_subscription",
        "manage_repository_notification_subscription",
        "mark_all_notifications_read",
        "push_files",
        "rerun_failed_jobs",
        "rerun_workflow_run",
        "run_workflow",
        "search_code",
        "search_issues",
        "search_orgs",
        "search_pull_requests",
        "search_repositories",
        "search_users",
        "submit_pending_pull_request_review",
        "get_notification_details"
      ],
      "headers": {
        "Authorization": "Bearer ${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "url": "https://api.githubcopilot.com/mcp/"
    },
    "grep": {
      "autoApprove": [
        "searchGitHub"
      ],
      "custom_instructions": {
        "text": "# 🔍 Grep MCP — Large-Scale Codebase Search\n\nThe **Grep MCP** enables fast, regex-powered searches across millions of public GitHub repositories.\nUse it to discover patterns, examples, or anti-patterns in real-world code at scale.\n\n---\n\n## 🧭 When to Use\n\nUse Grep MCP for:\n\n- Searching real usage of APIs, methods, or patterns\n- Finding examples of configuration, syntax, or libraries\n- Identifying deprecated or insecure practices\n- Gathering code references across many projects\n\nDo **not** use it for local code or single-file tasks.\n\n---\n\n## 🛠️ How to Use\n\n1. **Understand the Search**\n   - Extract the user’s intent, target keyword/pattern, and optional file/language scope.\n\n2. **Formulate a Grep Query**\n   - Use precise regex or keywords.\n   - Add optional filters:\n     - `--language`, `--ext`, `--ignore-case`, `--context N`\n\n3. **Run via Grep MCP**\n   - Route the query through the MCP server.\n   - Do not attempt to grep local files.\n\n4. **Return Useful Output**\n   - Include matched lines, file paths, and repo names.\n   - Summarize results when possible.\n\n---\n\n## 📌 Examples\n\n| Task | Use Grep MCP? |\n|------|----------------|\n| Find `useEffect` usage | ✅ Yes |\n| Search `eval()` in JS | ✅ Yes |\n| Explore how OpenTelemetry is initialized in Python services | ✅ Yes |\n| Search for insecure `JWT` usage patterns in Node.js projects | ✅ Yes |\n| Fix local syntax error | ❌ No |\n| Rename a variable in a local file | ❌ No |\n\n---\n\n## ✅ Final Tip\n\n> Use Grep MCP for high-volume, **documentation-grade** code search across open-source GitHub projects.  \n> Keep queries clean and focused to reduce noise.\n\n---"
      },
      "disabled": true,
      "url": "https://mcp.grep.app"
    },
    "sequentialthinking": {
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "autoApprove": [
        "sequentialthinking"
      ],
      "command": "npx",
      "custom_instructions": {
        "text": "The `Sequential Thinking` MCP is a specialized tool designed to support **deep, adaptive, and multi-step reasoning**. \nIt allows for a flexible, evolving approach to problem-solving, where each thought refines or builds upon the previous one.\n\nUse this module when the task requires **nonlinear thinking**, **exploration**, or **strategic reasoning** beyond a simple one-shot response.\n\n---\n\n## 🧩 When to Use SequentialThinking\n\nEngage the `Sequential Thinking` MCP for:\n\n- Explicit User request.\n- Complex or ambiguous coding tasks\n- Multi-layered technical problems\n- Deep debugging or architectural trade-offs\n- Questions that benefit from **step-by-step** or **reflective analysis**\n- Design reasoning that may evolve across multiple stages\n\n> ✅ Use it to thoughtfully and accurately fulfill the user's task.\n\n---"
      },
      "disabled": false
    },
    "shadcn-theme": {
      "args": [
        "-y",
        "shadcn@latest",
        "registry:mcp"
      ],
      "autoApprove": [
        "init",
        "get_items",
        "get_item",
        "add_item"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "REGISTRY_URL": "https://tweakcn.com/r/themes/registry.json"
      }
    },
    "shadcn-ui": {
      "args": [
        "@jpisnice/shadcn-ui-mcp-server"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": ""
      }
    },
    "taskmanager": {
      "args": [
        "-y",
        "@kazuph/mcp-taskmanager@latest"
      ],
      "autoApprove": [
        "request_planning",
        "get_next_task",
        "mark_task_done",
        "approve_task_completion",
        "approve_request_completion",
        "open_task_details",
        "list_requests",
        "add_tasks_to_request",
        "update_task",
        "delete_task"
      ],
      "command": "npx",
      "custom_instructions": {
        "text": "For every user prompt:\n\n    Decompose into Tasks\n    Always begin by breaking the prompt into small, actionable tasks. Think in terms of steps required to fully satisfy the request.\n\n    Use the TaskManager MCP\n    Treat each step as a task. Queue and manage these tasks using the TaskManager. Never skip task creation or execution.\n\n    Consult Memory First\n    Before planning or executing tasks, use the Memory MCP to recall relevant goals, preferences, past tasks, or patterns. Let memory guide how tasks are understood and executed.\n\n    Step-by-Step Execution\n    Process one task at a time. Always retrieve the next task, execute it carefully, and mark it done before moving to the next.\n\n    Use Context7 for Code Tasks\n    If any task involves programming, libraries, tools, or APIs—use Context7 MCP to fetch up-to-date documentation before writing code or providing an explanation. Use this documentation as your source of truth.\n\n    Think Logically\n    For tasks that involve reasoning, planning, or step-by-step problem solving, invoke the SequentialThinking MCP and follow its structured thinking process.\n\n    Store New Knowledge\n    As you work through tasks, capture important discoveries, habits, goals, and patterns using the Memory MCP.\n\n    Full Completion\n    Do not consider the request complete until all tasks are processed, memory is updated, and the entire flow has been reviewed."
      },
      "disabled": true
    },
    "taskmaster-ai": {
      "args": [
        "-y",
        "--package=task-master-ai",
        "task-master-ai"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "OPENAI_API_KEY": ""
      }
    }
  },
  "nativeMCPServers": {
    "mcphub": {
      "autoApprove": [
        "get_current_servers",
        "toggle_mcp_server"
      ],
      "disabled": false,
      "disabled_prompts": [
        "create_native_server"
      ],
      "disabled_resources": [],
      "disabled_tools": []
    },
    "neovim": {
      "autoApprove": [
        "execute_lua",
        "execute_command",
        "read_file",
        "move_item",
        "read_multiple_files",
        "delete_items",
        "find_files",
        "list_directory",
        "write_file",
        "edit_file"
      ],
      "disabled": false,
      "disabled_prompts": [
        "parrot"
      ],
      "disabled_tools": [
        "replace_in_file"
      ]
    }
  }
}
