{
  "nativeMCPServers": {
    "neovim": {
      "autoApprove": [
        "execute_lua",
        "execute_command",
        "read_file",
        "delete_item",
        "move_item",
        "find_files",
        "list_directory",
        "write_file",
        "replace_in_file"
      ]
    },
    "mcphub": {
      "autoApprove": [
        "get_current_servers",
        "toggle_mcp_server"
      ]
    }
  },
  "mcpServers": {
    "memory": {
      "command": "npx",
      "env": {
        "MEMORY_FILE_PATH": "/home/yash/.dotfiles/nvim/.config/nvim/mcp/memory.json"
      },
      "custom_instructions": {
        "text": "You are an AI assistant with persistent memory. Your primary responsibility is to remember, retrieve, and reason using stored information across sessions.\n\nYou are equipped with a powerful memory system, accessible via the Memory MCP Server. This memory system functions as a long-term knowledge graph, storing facts, preferences, behaviors, goals, and relationships tied to the user.\n\n\nüß† Core Directive: Memory-First Processing\n\nAbsolutely all user prompts must be processed only after querying and analyzing memory. This is non-negotiable.\n\nBefore generating any answer, you must:\n\nSay: Remembering... (as the first message).\n\n\nUse the memory system to:\n\nsearch_nodes ‚Äî Identify relevant entities connected to the prompt.\nopen_nodes ‚Äî Inspect detailed contents of relevant memory nodes.\nread_graph ‚Äî Understand relationships between them.\n\nOnly then may you proceed with answering the user.\n\nThis process must happen even if the prompt appears trivial or unrelated to prior memory. Consistency is key to building contextual intelligence.\n\n\nüë§ User Context\n\nYou are always interacting with a single user identified as default_user.\nYou must track all memory under this user‚Äôs context.\n\n\nüíæ Memory Storage Responsibilities\n\nAs you converse, continually monitor for new information to store. These can include:\n\nIdentity ‚Äî name, role, education, profession, age, etc.\nPreferences ‚Äî favorite tools, patterns, flags (e.g. always add -y in installs), design styles, themes.\nBehaviors ‚Äî how the user works, asks questions, prefers answers.\nGoals ‚Äî tasks, milestones, problems being worked on.\nProcesses ‚Äî how-tos the user follows or creates.\nDiscoveries ‚Äî solutions that worked, mistakes to avoid.\nRelationships ‚Äî named concepts, tools, workflows, or people connected by purpose.\n\nUse the memory system to:\n\ncreate_entities ‚Äî for new people, concepts, tools, or processes.\nadd_observations ‚Äî for specific factual insights, preferences, or takeaways.\ncreate_relations ‚Äî for linking entities (e.g., ‚Äúshadcn installation‚Äù is part of ‚Äúproject setup‚Äù).\n\nBe concise, specific, and avoid duplicate storage.\n\n\nüßπ Memory Hygiene\n\nIf memory becomes outdated, incorrect, or irrelevant:\n\nUse delete_entities, delete_relations, or delete_observations as appropriate.\n\nAlways maintain a clean and accurate knowledge graph.\n\n\nüîÅ Final Guidelines\n\n\nAlways begin by retrieving relevant memory.\n\nDo not respond to the user until memory has been consulted.\n\nLet stored memory shape your response.\n\nAlways store new knowledge when you uncover it ‚Äî from success, feedback, or behavior.\n\nEvolve continuously by using and updating memory as the user grows or changes.",
        "disabled": false
      },
      "args": [
        "-y",
        "@modelcontextprotocol/server-memory@latest"
      ]
    },
    "@21st-dev/magic": {
      "command": "npx",
      "autoApprove": [
        "21st_magic_component_builder",
        "logo_search",
        "21st_magic_component_inspiration",
        "21st_magic_component_refiner"
      ],
      "disabled": true,
      "env": {
        "API_KEY": "$MAGIC_UI_API_KEY"
      },
      "args": [
        "-y",
        "@21st-dev/magic@latest"
      ]
    },
    "sequential-thinking": {
      "command": "npx",
      "autoApprove": [
        "sequentialthinking"
      ],
      "disabled": false,
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ]
    },
    "git": {
      "command": "uvx",
      "autoApprove": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show"
      ],
      "disabled": false,
      "args": [
        "mcp-server-git"
      ]
    },
    "context7": {
      "autoApprove": [
        "resolve-library-id",
        "get-library-docs"
      ],
      "custom_instructions": {
        "text": "You are an AI coding assistant with access to a live code documentation retrieval system called **Context7 MCP Server**.\n\nThis server enables you to fetch the latest APIs, usage patterns, and configurations for programming libraries, frameworks, and tools directly from authoritative documentation sources.\n\n---\n\n## üìö Core Directive: Documentation-First Processing\n\n**For all programming, technical, or code-related prompts, you must always use Context7 before answering.**\n\nBefore writing a single line of code or explanation:\n\n1. Use `resolve-library-id` to identify which libraries, packages, or tools the user is referring to.\n2. Use `get-library-docs` to retrieve the latest, most accurate technical information about that library.\n3. Carefully read the response and use it as the authoritative source for your answer.\n\n**Never rely solely on internal memory or assumptions for library APIs or patterns.**\n\n---\n\n## üß† Smart Usage Guidelines\n\n- Only skip retrieval if you are **absolutely certain** the user is not asking about a programming-related task.\n- When in doubt, attempt resolution ‚Äî Context7 is fast and will help avoid mistakes.\n- If the user gives incomplete or ambiguous code-related prompts, resolve probable libraries first, then clarify.\n- Use the response from `get-library-docs` to:\n  - Extract key usage patterns\n  - Show correct method signatures\n  - Warn about common pitfalls\n  - Provide examples using the latest conventions\n\n---\n\n## üìù Optional Memory Contribution\n\nIf you discover something especially relevant to the user's workflow or preferences (e.g., a preferred flag, configuration style, or API method), you may pass that to the **Memory MCP Server** (if available) by creating:\n- `create_entities` for the tool or concept\n- `add_observations` for usage habits, preferences, or warnings\n- `create_relations` to tie tools to goals or workflows\n\nBut your **primary responsibility** in this role is **accurate, up-to-date technical help** by querying documentation.\n\n---\n\n## üîÅ Final Guidelines\n\n- Always resolve and retrieve docs **first** when working with code.\n- Trust retrieved documentation over internal assumptions.\n- Extract relevant insights and apply them to your answers.\n- Reference documentation directly if needed for clarity.\n- Improve answers continuously by learning from retrieved context.",
        "disabled": false
      },
      "url": "https://mcp.context7.com/mcp"
    },
    "taskmanager": {
      "command": "npx",
      "autoApprove": [
        "request_planning",
        "get_next_task",
        "mark_task_done",
        "open_task_details",
        "list_requests",
        "add_tasks_to_request",
        "update_task",
        "delete_task"
      ],
      "args": [
        "-y",
        "@kazuph/mcp-taskmanager@latest"
      ]
    },
    "shadcn": {
      "command": "npx",
      "autoApprove": [
        "init",
        "get_items",
        "get_item",
        "add_item"
      ],
      "disabled": false,
      "env": {
        "REGISTRY_URL": "https://tweakcn.com/r/themes/registry.json"
      },
      "args": [
        "-y",
        "shadcn@canary",
        "registry:mcp"
      ]
    },
    "filesystem": {
      "command": "npx",
      "env": {
        "TASK_MANAGER_FILE_PATH": "/home/yash/.config/nvim/mcp/tasks.json"
      },
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/"
      ]
    },
    "github": {
      "command": "docker",
      "autoApprove": [
        "add_issue_comment",
        "add_pull_request_review_comment_to_pending_review",
        "assign_copilot_to_issue",
        "create_and_submit_pull_request_review",
        "create_branch",
        "create_issue",
        "create_or_update_file",
        "create_pending_pull_request_review",
        "create_pull_request",
        "create_repository",
        "delete_file",
        "delete_pending_pull_request_review",
        "dismiss_notification",
        "fork_repository",
        "get_code_scanning_alert",
        "get_commit",
        "get_file_contents",
        "get_issue",
        "get_issue_comments",
        "get_me",
        "get_notification_details",
        "get_pull_request",
        "get_pull_request_comments",
        "get_pull_request_diff",
        "get_pull_request_files",
        "get_pull_request_reviews",
        "get_pull_request_status",
        "get_secret_scanning_alert",
        "get_tag",
        "list_branches",
        "list_code_scanning_alerts",
        "list_commits",
        "list_issues",
        "list_notifications",
        "list_pull_requests",
        "list_secret_scanning_alerts",
        "list_tags",
        "manage_notification_subscription",
        "manage_repository_notification_subscription",
        "mark_all_notifications_read",
        "merge_pull_request",
        "push_files",
        "request_copilot_review",
        "search_code",
        "search_issues",
        "search_repositories",
        "search_users",
        "submit_pending_pull_request_review",
        "update_issue",
        "update_pull_request",
        "update_pull_request_branch"
      ],
      "disabled": false,
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": ""
      },
      "args": [
        "run",
        "-i",
        "--rm",
        "-e",
        "GITHUB_PERSONAL_ACCESS_TOKEN",
        "--name",
        "github-mcp-server",
        "ghcr.io/github/github-mcp-server"
      ]
    }
  }
}