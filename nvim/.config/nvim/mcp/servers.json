{
  "mcpServers": {
    "context7": {
      "custom_instructions": {
        "disabled": false,
        "text": "Always use context7 when I need code generation, setup or configuration steps, or\nlibrary/API documentation. This means you should automatically use the Context7 MCP\ntools to resolve library id and get library docs without me having to explicitly ask."
      },
      "disabled": false,
      "type": "streamable-http",
      "url": "https://mcp.context7.com/mcp"
    },
    "git": {
      "args": [
        "mcp-server-git"
      ],
      "autoApprove": [
        "git_status",
        "git_diff_unstaged",
        "git_diff_staged",
        "git_diff",
        "git_commit",
        "git_add",
        "git_reset",
        "git_log",
        "git_create_branch",
        "git_checkout",
        "git_show",
        "git_init",
        "git_branch"
      ],
      "command": "uvx",
      "disabled": false
    },
    "github": {
      "autoApprove": [
        "add_comment_to_pending_review",
        "add_issue_comment",
        "add_sub_issue",
        "assign_copilot_to_issue",
        "cancel_workflow_run",
        "create_and_submit_pull_request_review",
        "create_branch",
        "create_gist",
        "create_issue",
        "create_or_update_file",
        "create_pending_pull_request_review",
        "create_pull_request",
        "create_pull_request_with_copilot",
        "create_repository",
        "delete_file",
        "delete_pending_pull_request_review",
        "delete_workflow_run_logs",
        "dismiss_notification",
        "download_workflow_run_artifact",
        "fork_repository",
        "get_code_scanning_alert",
        "get_commit",
        "get_dependabot_alert",
        "get_discussion",
        "get_discussion_comments",
        "get_file_contents",
        "get_issue",
        "get_issue_comments",
        "get_job_logs",
        "get_me",
        "get_notification_details",
        "get_pull_request",
        "get_pull_request_comments",
        "get_pull_request_diff",
        "get_pull_request_files",
        "get_pull_request_reviews",
        "get_pull_request_status",
        "get_secret_scanning_alert",
        "get_tag",
        "get_workflow_run",
        "get_workflow_run_logs",
        "get_workflow_run_usage",
        "list_branches",
        "list_code_scanning_alerts",
        "list_commits",
        "list_dependabot_alerts",
        "list_discussion_categories",
        "list_discussions",
        "list_gists",
        "list_issues",
        "list_notifications",
        "list_pull_requests",
        "list_secret_scanning_alerts",
        "list_sub_issues",
        "list_tags",
        "list_workflow_jobs",
        "list_workflow_run_artifacts",
        "list_workflow_runs",
        "list_workflows",
        "manage_notification_subscription",
        "manage_repository_notification_subscription",
        "mark_all_notifications_read",
        "merge_pull_request",
        "push_files",
        "remove_sub_issue",
        "reprioritize_sub_issue",
        "request_copilot_review",
        "rerun_failed_jobs",
        "rerun_workflow_run",
        "run_workflow",
        "search_code",
        "search_issues",
        "search_orgs",
        "search_pull_requests",
        "search_repositories",
        "search_users",
        "submit_pending_pull_request_review",
        "update_gist",
        "update_issue",
        "update_pull_request",
        "update_pull_request_branch"
      ],
      "custom_instructions": {
        "text": "# 📦 Custom Instruction: GitHub MCP — Repository Context and Interaction\n\nWhen working with the GitHub MCP server, your first responsibility is to accurately identify the **repository context** before executing any Git-related operations.\n\n---\n\n## 🧭 Repository Identification\n\n> ✅ Use the following command to retrieve the repository owner and name:\n\n```bash\ngit remote -v\n```\n\n- Parse the output of this command and extract:\n   - Owner (Github user or organization)\n   - Repository name\n\nThis context is essential for interacting with GitHub MCP."
      },
      "disabled": true,
      "disabled_tools": [
        "cancel_workflow_run",
        "create_and_submit_pull_request_review",
        "create_branch",
        "create_or_update_file",
        "create_pending_pull_request_review",
        "create_pull_request",
        "create_repository",
        "delete_file",
        "delete_pending_pull_request_review",
        "delete_workflow_run_logs",
        "dismiss_notification",
        "download_workflow_run_artifact",
        "fork_repository",
        "get_code_scanning_alert",
        "get_dependabot_alert",
        "get_discussion",
        "get_discussion_comments",
        "get_file_contents",
        "get_job_logs",
        "get_me",
        "get_secret_scanning_alert",
        "get_tag",
        "get_workflow_run",
        "get_workflow_run_logs",
        "get_workflow_run_usage",
        "list_branches",
        "list_code_scanning_alerts",
        "list_dependabot_alerts",
        "list_discussion_categories",
        "list_discussions",
        "list_notifications",
        "list_secret_scanning_alerts",
        "list_tags",
        "list_workflow_jobs",
        "list_workflow_run_artifacts",
        "list_workflow_runs",
        "list_workflows",
        "manage_notification_subscription",
        "manage_repository_notification_subscription",
        "mark_all_notifications_read",
        "push_files",
        "rerun_failed_jobs",
        "rerun_workflow_run",
        "run_workflow",
        "search_code",
        "search_issues",
        "search_orgs",
        "search_pull_requests",
        "search_repositories",
        "search_users",
        "submit_pending_pull_request_review",
        "get_notification_details"
      ],
      "headers": {
        "Authorization": "Bearer ${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "url": "https://api.githubcopilot.com/mcp/"
    },
    "grep": {
      "autoApprove": [
        "searchGitHub"
      ],
      "custom_instructions": {
        "text": "# 🔍 Grep MCP — Large-Scale Codebase Search\n\nThe **Grep MCP** enables fast, regex-powered searches across millions of public GitHub repositories.\nUse it to discover patterns, examples, or anti-patterns in real-world code at scale.\n\n---\n\n## 🧭 When to Use\n\nUse Grep MCP for:\n\n- Searching real usage of APIs, methods, or patterns\n- Finding examples of configuration, syntax, or libraries\n- Identifying deprecated or insecure practices\n- Gathering code references across many projects\n\nDo **not** use it for local code or single-file tasks.\n\n---\n\n## 🛠️ How to Use\n\n1. **Understand the Search**\n   - Extract the user’s intent, target keyword/pattern, and optional file/language scope.\n\n2. **Formulate a Grep Query**\n   - Use precise regex or keywords.\n   - Add optional filters:\n     - `--language`, `--ext`, `--ignore-case`, `--context N`\n\n3. **Run via Grep MCP**\n   - Route the query through the MCP server.\n   - Do not attempt to grep local files.\n\n4. **Return Useful Output**\n   - Include matched lines, file paths, and repo names.\n   - Summarize results when possible.\n\n---\n\n## 📌 Examples\n\n| Task | Use Grep MCP? |\n|------|----------------|\n| Find `useEffect` usage | ✅ Yes |\n| Search `eval()` in JS | ✅ Yes |\n| Explore how OpenTelemetry is initialized in Python services | ✅ Yes |\n| Search for insecure `JWT` usage patterns in Node.js projects | ✅ Yes |\n| Fix local syntax error | ❌ No |\n| Rename a variable in a local file | ❌ No |\n\n---\n\n## ✅ Final Tip\n\n> Use Grep MCP for high-volume, **documentation-grade** code search across open-source GitHub projects.  \n> Keep queries clean and focused to reduce noise.\n\n---"
      },
      "disabled": true,
      "url": "https://mcp.grep.app"
    },
    "playwright": {
      "args": [
        "@playwright/mcp@latest",
        "--vision"
      ],
      "autoApprove": [
        "browser_close",
        "browser_resize",
        "browser_console_messages",
        "browser_handle_dialog",
        "browser_evaluate",
        "browser_file_upload",
        "browser_install",
        "browser_press_key",
        "browser_type",
        "browser_navigate",
        "browser_navigate_back",
        "browser_navigate_forward",
        "browser_network_requests",
        "browser_mouse_move_xy",
        "browser_mouse_click_xy",
        "browser_mouse_drag_xy",
        "browser_take_screenshot",
        "browser_snapshot",
        "browser_click",
        "browser_drag",
        "browser_hover",
        "browser_select_option",
        "browser_tab_list",
        "browser_tab_new",
        "browser_tab_select",
        "browser_tab_close",
        "browser_wait_for"
      ],
      "command": "npx",
      "disabled": true
    },
    "sequentialthinking": {
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ],
      "autoApprove": [
        "sequentialthinking"
      ],
      "command": "npx",
      "custom_instructions": {
        "text": "The `Sequential Thinking` MCP is a specialized tool designed to support **deep, adaptive, and multi-step reasoning**. \nIt allows for a flexible, evolving approach to problem-solving, where each thought refines or builds upon the previous one.\n\nUse this module when the task requires **nonlinear thinking**, **exploration**, or **strategic reasoning** beyond a simple one-shot response.\n\n---\n\n## 🧩 When to Use SequentialThinking\n\nEngage the `Sequential Thinking` MCP for:\n\n- Explicit User request.\n- Complex or ambiguous coding tasks\n- Multi-layered technical problems\n- Deep debugging or architectural trade-offs\n- Questions that benefit from **step-by-step** or **reflective analysis**\n- Design reasoning that may evolve across multiple stages\n\n> ✅ Use it to thoughtfully and accurately fulfill the user's task.\n\n---"
      },
      "disabled": false
    },
    "shadcn": {
      "args": [
        "shadcn@latest",
        "mcp"
      ],
      "command": "npx",
      "disabled": true,
      "type": "stdio"
    },
    "shadcn-theme": {
      "args": [
        "-y",
        "shadcn@latest",
        "registry:mcp"
      ],
      "autoApprove": [
        "init",
        "get_items",
        "get_item",
        "add_item"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "REGISTRY_URL": "https://tweakcn.com/r/themes/registry.json"
      }
    },
    "shadcn-ui": {
      "args": [
        "@jpisnice/shadcn-ui-mcp-server"
      ],
      "autoApprove": [
        "get_component",
        "get_component_demo",
        "list_components",
        "get_component_metadata",
        "get_directory_structure",
        "get_block",
        "list_blocks"
      ],
      "command": "npx",
      "disabled": true,
      "disabled_prompts": [],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": ""
      }
    },
    "shrimp-task-manager": {
      "args": [
        "-y",
        "mcp-shrimp-task-manager"
      ],
      "autoApprove": [
        "plan_task",
        "analyze_task",
        "reflect_task",
        "split_tasks",
        "list_tasks",
        "execute_task",
        "verify_task",
        "delete_task",
        "clear_all_tasks",
        "update_task",
        "query_task",
        "get_task_detail",
        "process_thought",
        "init_project_rules",
        "research_mode"
      ],
      "command": "npx",
      "disabled": true,
      "env": {
        "DATA_DIR": "/home/yash/shrimp-task-manager-data",
        "ENABLE_GUI": "true",
        "TEMPLATES_USE": "en",
        "WEB_PORT": "34986"
      }
    }
  },
  "nativeMCPServers": {
    "mcphub": {
      "autoApprove": [
        "get_current_servers",
        "toggle_mcp_server"
      ],
      "disabled": false,
      "disabled_prompts": [
        "create_native_server"
      ],
      "disabled_resources": [],
      "disabled_tools": []
    },
    "neovim": {
      "autoApprove": [
        "execute_lua",
        "execute_command",
        "read_file",
        "move_item",
        "read_multiple_files",
        "delete_items",
        "find_files",
        "list_directory",
        "write_file",
        "edit_file"
      ],
      "disabled": false,
      "disabled_prompts": [
        "parrot"
      ],
      "disabled_tools": [
        "replace_in_file"
      ]
    }
  }
}
